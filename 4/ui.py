# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QMessageBox
import dataBase


class Ui_Form(object):
    def __init__(self):
        self.table_item = ''
        db = dataBase.DataBase(messagebox=self)
        self.isSelected = [False] * 11  # 框选list,bool
        self.lineEditMessage = [''] * 11  # 获取所有文本框中的内容
        self.mode = ''  # 功能模式
        self.cursor = db.getCursor()
        self.cnxn = db.getCnxn()
        self.display_item = ''  # select子句
        self.condition_item = ''  # where子句
        self.table_item = ''  # from子句
        self.table_selected = [False] * 3  # 0为S,1为SC，2为C

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(829, 644)
        self.lineEdit_display = QtWidgets.QLineEdit(Form)
        self.lineEdit_display.setGeometry(QtCore.QRect(20, 310, 781, 321))
        self.lineEdit_display.setObjectName("lineEdit_display")
        self.comboBox_mode = QtWidgets.QComboBox(Form)
        self.comboBox_mode.setGeometry(QtCore.QRect(190, 270, 261, 31))
        self.comboBox_mode.setObjectName("comboBox_mode")
        self.comboBox_mode.addItem("")
        self.comboBox_mode.addItem("")
        self.comboBox_mode.addItem("")
        self.comboBox_mode.addItem("")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(100, 270, 91, 31))
        self.label.setObjectName("label")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(110, 10, 579, 241))
        self.groupBox.setStyleSheet("selection-background-color: rgb(255, 255, 127);")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.checkBox_sclass = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_sclass.setObjectName("checkBox_sclass")
        self.gridLayout.addWidget(self.checkBox_sclass, 0, 0, 1, 1)
        self.lineEdit_sclass = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_sclass.setObjectName("lineEdit_sclass")
        self.gridLayout.addWidget(self.lineEdit_sclass, 0, 1, 1, 1)
        self.checkBox_cno = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_cno.setObjectName("checkBox_cno")
        self.gridLayout.addWidget(self.checkBox_cno, 0, 2, 1, 1)
        self.lineEdit_cno = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_cno.setObjectName("lineEdit_cno")
        self.gridLayout.addWidget(self.lineEdit_cno, 0, 3, 1, 1)
        self.checkBox_sno = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_sno.setObjectName("checkBox_sno")
        self.gridLayout.addWidget(self.checkBox_sno, 1, 0, 1, 1)
        self.lineEdit_sno = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_sno.setObjectName("lineEdit_sno")
        self.gridLayout.addWidget(self.lineEdit_sno, 1, 1, 1, 1)
        self.checkBox_cname = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_cname.setObjectName("checkBox_cname")
        self.gridLayout.addWidget(self.checkBox_cname, 1, 2, 1, 1)
        self.lineEdit_cname = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_cname.setObjectName("lineEdit_cname")
        self.gridLayout.addWidget(self.lineEdit_cname, 1, 3, 1, 1)
        self.checkBox_sname = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_sname.setObjectName("checkBox_sname")
        self.gridLayout.addWidget(self.checkBox_sname, 2, 0, 1, 1)
        self.lineEdit_sname = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_sname.setObjectName("lineEdit_sname")
        self.gridLayout.addWidget(self.lineEdit_sname, 2, 1, 1, 1)
        self.checkBox_cpno = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_cpno.setObjectName("checkBox_cpno")
        self.gridLayout.addWidget(self.checkBox_cpno, 2, 2, 1, 1)
        self.lineEdit_cpno = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_cpno.setObjectName("lineEdit_cpno")
        self.gridLayout.addWidget(self.lineEdit_cpno, 2, 3, 1, 1)
        self.checkBox_ssex = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_ssex.setObjectName("checkBox_ssex")
        self.gridLayout.addWidget(self.checkBox_ssex, 3, 0, 1, 1)
        self.lineEdit_ssex = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_ssex.setObjectName("lineEdit_ssex")
        self.gridLayout.addWidget(self.lineEdit_ssex, 3, 1, 1, 1)
        self.checkBox_ccredit = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_ccredit.setObjectName("checkBox_ccredit")
        self.gridLayout.addWidget(self.checkBox_ccredit, 3, 2, 1, 1)
        self.lineEdit_ccredit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_ccredit.setObjectName("lineEdit_ccredit")
        self.gridLayout.addWidget(self.lineEdit_ccredit, 3, 3, 1, 1)
        self.checkBox_sage = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_sage.setObjectName("checkBox_sage")
        self.gridLayout.addWidget(self.checkBox_sage, 4, 0, 1, 1)
        self.lineEdit_sage = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_sage.setText("")
        self.lineEdit_sage.setObjectName("lineEdit_sage")
        self.gridLayout.addWidget(self.lineEdit_sage, 4, 1, 1, 1)
        self.checkBox_grade = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_grade.setObjectName("checkBox_grade")
        self.gridLayout.addWidget(self.checkBox_grade, 4, 2, 1, 1)
        self.lineEdit_grade = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_grade.setObjectName("lineEdit_grade")
        self.gridLayout.addWidget(self.lineEdit_grade, 4, 3, 1, 1)
        self.checkBox_sdept = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_sdept.setObjectName("checkBox_sdept")
        self.gridLayout.addWidget(self.checkBox_sdept, 5, 0, 1, 1)
        self.lineEdit_sdept = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_sdept.setObjectName("lineEdit_sdept")
        self.gridLayout.addWidget(self.lineEdit_sdept, 5, 1, 1, 1)
        self.pushButton_ok = QtWidgets.QPushButton(Form)
        self.pushButton_ok.setGeometry(QtCore.QRect(470, 270, 112, 34))
        self.pushButton_ok.setObjectName("pushButton_ok")
        self.pushButton_clear = QtWidgets.QPushButton(Form)
        self.pushButton_clear.setGeometry(QtCore.QRect(590, 270, 112, 34))
        self.pushButton_clear.setObjectName("pushButton_clear")

        # 信号
        # 选中确定按钮后获取选中的值随后清空所有输入内容
        self.pushButton_ok.clicked.connect(self.PushButton_ok)
        # 选中清空按钮后清空文本框和所有输入内容
        self.pushButton_clear.clicked.connect(self.clearLineEdit)
        self.pushButton_clear.clicked.connect(self.clearCheckBox)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "180400501 曹志远 数据库实验4"))
        self.lineEdit_display.setText(_translate("Form", "                                   180400501 曹志远"))
        self.comboBox_mode.setItemText(0, _translate("Form", "查询"))
        self.comboBox_mode.setItemText(1, _translate("Form", "插入"))
        self.comboBox_mode.setItemText(2, _translate("Form", "删除"))
        self.comboBox_mode.setItemText(3, _translate("Form", "修改"))
        self.label.setText(_translate("Form", "功能选择"))
        self.groupBox.setTitle(_translate("Form", "项目选择区"))
        self.checkBox_sclass.setText(_translate("Form", "班级"))
        self.checkBox_cno.setText(_translate("Form", "课程号"))
        self.checkBox_sno.setText(_translate("Form", "学号"))
        self.checkBox_cname.setText(_translate("Form", "课程名"))
        self.checkBox_sname.setText(_translate("Form", "姓名"))
        self.checkBox_cpno.setText(_translate("Form", "先修课"))
        self.checkBox_ssex.setText(_translate("Form", "性别"))
        self.checkBox_ccredit.setText(_translate("Form", "学分"))
        self.checkBox_sage.setText(_translate("Form", "年龄"))
        self.checkBox_grade.setText(_translate("Form", "成绩"))
        self.checkBox_sdept.setText(_translate("Form", "系"))
        self.pushButton_ok.setText(_translate("Form", "确定"))
        self.pushButton_clear.setText(_translate("Form", "清空"))

    def getSelected(self):
        """检测每个框是否被选中"""
        self.isSelected[0] = self.checkBox_sclass.isChecked()
        self.isSelected[1] = self.checkBox_sno.isChecked()
        self.isSelected[2] = self.checkBox_sname.isChecked()
        self.isSelected[3] = self.checkBox_ssex.isChecked()
        self.isSelected[4] = self.checkBox_sage.isChecked()
        self.isSelected[5] = self.checkBox_sdept.isChecked()
        self.isSelected[6] = self.checkBox_cno.isChecked()
        self.isSelected[7] = self.checkBox_cname.isChecked()
        self.isSelected[8] = self.checkBox_cpno.isChecked()
        self.isSelected[9] = self.checkBox_ccredit.isChecked()
        self.isSelected[10] = self.checkBox_grade.isChecked()

    def clearCheckBox(self):
        """清空所有的选择框"""
        self.checkBox_sclass.setCheckState(False)
        self.checkBox_sno.setCheckState(False)
        self.checkBox_sname.setCheckState(False)
        self.checkBox_ssex.setCheckState(False)
        self.checkBox_sage.setCheckState(False)
        self.checkBox_sdept.setCheckState(False)
        self.checkBox_cno.setCheckState(False)
        self.checkBox_cname.setCheckState(False)
        self.checkBox_cpno.setCheckState(False)
        self.checkBox_ccredit.setCheckState(False)
        self.checkBox_grade.setCheckState(False)

    def clearLineEdit(self):
        """清空所有的lineEdit"""
        self.lineEdit_sname.clear()
        self.lineEdit_sno.clear()
        self.lineEdit_sage.clear()
        self.lineEdit_ssex.clear()
        self.lineEdit_sdept.clear()
        self.lineEdit_cpno.clear()
        self.lineEdit_cno.clear()
        self.lineEdit_ccredit.clear()
        self.lineEdit_cname.clear()
        self.lineEdit_sclass.clear()
        self.lineEdit_grade.clear()
        self.lineEdit_display.clear()

    def getLineEdit(self):
        """获取选中的框中值"""
        self.lineEditMessage[0] = self.lineEdit_sclass.text()
        self.lineEditMessage[1] = self.lineEdit_sno.text()
        self.lineEditMessage[2] = self.lineEdit_sname.text()
        self.lineEditMessage[3] = self.lineEdit_ssex.text()
        self.lineEditMessage[4] = self.lineEdit_sage.text()
        self.lineEditMessage[5] = self.lineEdit_sdept.text()
        self.lineEditMessage[6] = self.lineEdit_cno.text()
        self.lineEditMessage[7] = self.lineEdit_cname.text()
        self.lineEditMessage[8] = self.lineEdit_cpno.text()
        self.lineEditMessage[9] = self.lineEdit_ccredit.text()
        self.lineEditMessage[10] = self.lineEdit_grade.text()
        print(self.lineEditMessage)

    def MessageBox_Critical(self, err):
        """严重错误"""
        QMessageBox.critical(self, '错误', str(err),
                             QMessageBox.Abort, QMessageBox.Abort)
        sys.exit(-1)

    def MessageBox_wrongInput(self):
        """输入错误弹出该框"""
        QMessageBox.warning(self, '输入错误', '输入条件有误，请重新输入', QMessageBox.Ok)
        # 执行清理
        self.clearCheckBox()
        self.clearLineEdit()

    def PushButton_ok(self):
        """按下ok按钮后的行为"""
        # 获取和清空
        self.getSelected()
        self.getLineEdit()
        self.getTable_selected()
        self.getTable_item()
        self.clearCheckBox()
        self.clearLineEdit()
        # 获取模式
        self.mode = self.comboBox_mode.currentText()
        self.getDisplay_item()
        if self.mode == '查询':
            self.lineEdit_display.setText(self.display_item)
            # self.cursor.execute('select ' + self.display_item + ' from S where ' + self.condition_item + ';')

        elif self.mode == '更新':
            pass
        elif self.mode == '删除':
            pass
        elif self.mode == '插入':
            pass

    def getDisplay_item(self):  # 有问题，这里获得的应该是项目名而非框里的内容
        """获取select子句内容"""
        self.display_item = ''
        for i in range(0, 11):
            if self.isSelected[i]:
                self.display_item = self.display_item + self.lineEditMessage[i] + ','
        if len(self.display_item) != 0:
            self.display_item = self.display_item[0: len(self.display_item) - 1]  # 去掉结尾的逗号

    def getCondition_item(self):
        pass

    def getTable_item(self):
        """获取from子句内容"""
        self.table_item = ''
        if self.table_selected[1]:  # 选中成绩一定需要SC表
            self.table_item += self.condition_item + 'SC,'
        if self.table_selected[0]:
            self.table_item += self.condition_item + 'S,'
        if self.table_selected[2]:
            self.table_item += self.condition_item + 'C,'
        self.table_item = self.table_item[0:len(self.table_item) - 1]
        print(self.table_item)

    def getTable_selected(self):
        """获取表是否选中"""
        self.table_selected = [False] * 3
        if self.isSelected[10]:  # SC选中检测
            self.table_selected[1] = True
        for i in range(7, 10):  # C选中检测
            if self.isSelected[i]:
                self.table_selected[2] = True
        for i in range(2, 6):
            if self.isSelected[i]:  # S选中检测
                self.table_selected[0] = True
        # 如果没有表被选中，则输出error
        i = 0
        while i < 3:
            if self.table_selected[i]:
                break;
            i += 1
        if i == 3:
            self.MessageBox_wrongInput()


class MyMainForm(QMainWindow, Ui_Form):
    def __init__(self, parent=None):
        super(MyMainForm, self).__init__(parent)
        self.setupUi(self)
